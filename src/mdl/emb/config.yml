dim : 8 # embedding dim. it matters for skill vectors if the skill set is small (e.g., in imdb or gith) or large (e.g., in dblp or uspt)
#these are folders
output:
  ../../../output/dblp/toy.dblp.v12.json #will be set dynamically in ./src/main.py

model:
  batch_size : 128 # batch_size for loaders
  epochs : 100 # num max epochs
  ns : 5 # number of negative samples
  lr: 0.001 #learning rate
  shuffle: True
  save_per_epoch: False

  # Quoc V. Le, TomÃ¡s Mikolov: Distributed Representations of Sentences and Documents. ICML 2014: 1188-1196
  dnn: # we use gensim
    dm: 1 # training algorithm. 1: distributed memory (PV-DM), 0: distributed bag of words (PV-DBOW)
    # NOTE: As the input is a skill subset, so either the sum/avg of skill vectors individually >> embtype = 'skill' or 'joint' and  dbow_words = True
    # OR the team vecs when the words are only skills. So, embtype = 'skill' and  dbow_words = False
    # let's remove this and do for always
    # dbow_words: True # train word-vectors in skip-gram fashion; 0: no (default, faster), 1: yes.
    embtype: 'skill' # 'skill', 'member', 'skillmember', 'skilltime'
    window: 10 # cooccurrence window. In OpeNTF (for teams), depends on the average team size (n_members) plus n_skills per teams
    nworkers: 16 #this is for gensim

  gnn:
    graph:
      structure:
        #('member', 'm') #homo
        #([('skill', 'to', 'member')], 'sm') #hetero
        ([('skill', 'to', 'team'), ('member', 'to', 'team')], 'stm')
        #([('skill', 'to', 'team'), ('member', 'to', 'team'), ('loc', 'to', 'team')], 'stml')
        #([('skill', 'to', 'skill'), ('skill', 'to', 'team'), ('member', 'to', 'team'), ('loc', 'to', 'team')], 'sstml')

      supervision_edge_types:
        null # it will take all the forward edge_types as supervision edges
        #([('member', 'to', 'team')], 'stm')

      dup_edge:
        #null # keep the duplicates, else: merged by 'add', 'mean', 'min', 'max', or 'mul'
        add #mean, min, max, mul
      'pre': False # use pretrained Dnn skill vectors as initial node features of graph data

    pytorch: torch>=2.5.1 #--index-url https://download.pytorch.org/whl/cu124' #will be set dynamically in ./src/main.py from root config.yml

    #Grover, Aditya, and Jure Leskovec. "node2vec: Scalable feature learning for networks." Proceedings of the 22nd ACM SIGKDD international conference on Knowledge discovery and data mining. 2016.
    n2v:
      walk_length: 5
      context_size: 2
      walks_per_node: 10
      num_negative_samples': 10
      p: 1.0
      q: 1.0

  #Thomas N. Kipf, Max Welling: Semi-Supervised Classification with Graph Convolutional Networks. ICLR (Poster) 2017
  gnn.gcn:
    hidden_dim: 10
    p: 1.0
    q: 1.0

#  'gnn.gs': {
#      'e' : 100,                # number of epochs
#      'b' : 128,              # batch size
#      'd' : 8,                # embedding dimension
#      'ns' : 5,               # number of negative samples
#      'h' : 2,                # number of attention heads (if applicable)
#      'nn' : [30, 20],        # number of neighbors in each hop ([20, 10] -> 20 neighbors in first hop, 10 neighbors in second hop)
#      'graph_types' : 'stm',   # graph type used for a single run (stm -> ste -> skill-team-expert)
#      'agg' : 'mean',         # aggregation method used for merging multiple edges between the same source and destination node
#      'dir' : False,          # whether the graph is directed
#  },
#  'gnn.gin': {
#      'e': 100,
#      'b': 128,
#      'd': 8,
#      'ns' : 5,
#      'h': 2,
#      'nn': [30, 20],
#      'graph_types': 'stm',
#      'agg': 'mean',
#      'dir': False,
#  },
#  'gnn.gat': {
#      'e': 100,
#      'b': 128,
#      'd': 8,
#      'ns' : 5,
#      'h': 2,
#      'nn': [30, 20],
#      'graph_types': 'stm',
#      'agg': 'mean',
#      'dir': False,
#  },
#  'gnn.gatv2': {
#      'e': 100,
#      'b': 128,
#      'd': 8,
#      'ns' : 5,
#      'h': 2,
#      'nn': [20, 10],
#      'graph_types': 'stm',
#      'agg': 'mean',
#      'dir': False,
#  },
#  'gnn.han': {
#      'e': 100,
#      'b': 128,
#      'd': 8,
#      'ns' : 5,
#      'h': 2,
#      'nn': [30, 20],
#      'graph_types': 'stm',
#      'agg': 'mean',
#      'dir': False,
#      'metapaths':{
#          'sm': [[('skill', 'to', 'member'), ('member', 'rev_to', 'skill')]],
#          'stm': [
#              [('member', 'to', 'team'), ('team', 'rev_to', 'skill'), ('skill', 'to', 'team'), ('team', 'rev_to', 'member')],
#              [('skill', 'to', 'team'), ('team', 'rev_to', 'member'), ('member', 'to', 'team'), ('team', 'rev_to', 'skill')],
#              [('member', 'to', 'team'), ('team', 'rev_to', 'member')],
#              [('skill', 'to', 'team'), ('team', 'rev_to', 'skill')],
#          ],
#          'stml': [
#              [('member', 'to', 'team'), ('team', 'rev_to', 'loc'), ('loc', 'to', 'team'), ('team', 'rev_to', 'member')],
#              [('skill', 'to', 'team'), ('team', 'rev_to', 'member'), ('member', 'to', 'team'), ('team', 'rev_to', 'skill')],
#              [('member', 'to', 'team'), ('team', 'rev_to', 'member')],
#              [('skill', 'to', 'team'), ('team', 'rev_to', 'skill')],
#          ],
#          # added one extra e-e connection in the middle
#          # 'sm.en': [[('skill', 'to', 'skill'), ('skill', 'to', 'member'), ('member', 'to', 'member'), ('member', 'rev_to', 'skill'), ('skill', 'to', 'skill')]],
#          'sm.en': [[('skill', 'to', 'skill'), ('skill', 'to', 'member'), ('member', 'rev_to', 'skill'), ('skill', 'to', 'skill')]],
#          'stm.en': [
#              [('member', 'to', 'team'), ('team', 'rev_to', 'skill'), ('skill', 'to', 'team'), ('team', 'rev_to', 'member')],
#              [('skill', 'to', 'team'), ('team', 'rev_to', 'member'), ('member', 'to', 'team'), ('team', 'rev_to', 'skill')],
#              [('member', 'to', 'team'), ('team', 'rev_to', 'member')],
#              [('skill', 'to', 'team'), ('team', 'rev_to', 'skill')],
#              # repeating the same set of metapaths with additional s-s or e-e connections
#              # [('member', 'to', 'member'), ('member', 'to', 'team'), ('team', 'rev_to', 'skill'), ('skill', 'to', 'team'), ('team', 'rev_to', 'member'), ('member', 'to', 'member')],
#              # [('skill', 'to', 'skill'), ('skill', 'to', 'team'), ('team', 'rev_to', 'member'), ('member', 'to', 'team'), ('team', 'rev_to', 'skill'), ('skill', 'to', 'skill')],
#              # [('member', 'to', 'member'), ('member', 'to', 'team'), ('team', 'rev_to', 'member'), ('member', 'to', 'member')],
#              # [('skill', 'to', 'skill'), ('skill', 'to', 'team'), ('team', 'rev_to', 'skill'), ('skill', 'to', 'skill')],
#          ]
#      }
#  },
#  'gnn.gine': {
#      'e': 100,
#      'b': 128,
#      'd': 8,
#      'ns' : 5,
#      'h': 2,
#      'nn': [30, 20],
#      'graph_types': 'stm',
#      'agg': 'mean',
#      'dir': False,
#  },
#  'gnn.lant': {
#      'e': 100,
#      'b': 128,
#      'd': 8,
#      'ns' : 5,
#      'h': 2,
#      'nn': [30, 20],
#      'graph_types': 'stm',
#      'agg': 'mean',
#      'dir': False,
#  },
#  'gnn.m2v': {
#      'graph_types':'stm', # this value will be changed during runtime in each loop according to the graph_type and then be used in the embedding_output var
#      'metapath' : {
#          'sm' : [
#              ('member','rev_to','skill'),
#              ('skill', 'to', 'member'),
#          ],
#          'stm' : [
#              ('member','to','team'),
#              ('team', 'rev_to', 'skill'),
#              ('skill','to','team'),
#              ('team', 'rev_to', 'member'),
#          ],
#          'stml' : [
#              ('member','to','team'),
#              ('team', 'rev_to', 'loc'),
#              ('loc','to','team'),
#              ('team', 'rev_to', 'member'),
#          ],
#
#          # experimental section
#          'sm.en' : [
#              ('member','rev_to','skill'),
#              # ('skill', 'to', 'skill'),           # additional s-s connection
#              ('skill', 'to', 'member'),
#          ],
#          'stm.en' : [
#              ('member','to','team'),
#              ('team', 'rev_to', 'skill'),
#              # ('skill', 'to', 'skill'),           # additional s-s connection
#              ('skill','to','team'),
#              ('team', 'rev_to', 'member'),
#          ],
#      },
#      'walk_length': 10,
#      'context_size': 10,
#      'walks_per_node': 20,
#      'ns' : 5,
#      'd': 8,
#      'b': 128,
#      'e': 100,
#  },
#},